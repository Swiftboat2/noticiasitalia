/**
 * @fileOverview Security rules for the NoticiasItalia application.
 *
 * Core Philosophy:
 * This ruleset enforces strict role-based access control, primarily using an "admin" role.
 * The ruleset is designed with simplicity and security in mind, avoiding complex lookups and
 * prioritizing clear, easily maintainable logic.
 *
 * Data Structure:
 * - `/news_articles/{newsArticleId}`: Stores news article data.
 * - `/roles_admin/{userId}`: Stores admin user IDs. The existence of a document here
 *   grants admin privileges.
 *
 * Key Security Decisions:
 * - Only authenticated administrators can create, update, or delete news articles.
 * - Listing of the `/roles_admin` collection is disallowed to prevent unauthorized discovery
 *   of administrator accounts.
 * - The presence of a document in `/roles_admin/{userId}` grants admin privileges, with no
 *   data being stored or validated within the document itself.
 * - Data validation is relaxed to allow for rapid prototyping and iteration. Focus is placed
 *   on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Admin status is checked directly via the existence of a document in `/roles_admin/{userId}`,
 *   avoiding costly `get()` calls in the `news_articles` rules.
 *
 * Structural Segregation:
 * - The `/news_articles` collection separates concerns by storing all news articles in a single collection,
 *   simplifying security rules and fulfilling the requirement that all articles share the same security constraints.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in the `/roles_admin/{userId}` collection.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the news_articles collection. Only admins can create, update, or delete news articles.
     * @path /news_articles/{newsArticleId}
     * @allow (create) - An admin user can create a news article.
     * @deny (create) - A non-admin user cannot create a news article.
     * @allow (update) - An admin user can update a news article.
     * @deny (update) - A non-admin user cannot update a news article.
     * @allow (delete) - An admin user can delete a news article.
     * @deny (delete) - A non-admin user cannot delete a news article.
     * @principle Enforces role-based access control, allowing only admins to modify news articles.
     */
    match /news_articles/{newsArticleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the roles_admin collection. Only admins can create roles. Listing is denied to prevent unauthorized discovery of admin accounts.
     * @path /roles_admin/{userId}
     * @allow (create) - An admin user can create a role.
     * @deny (create) - A non-admin user cannot create a role.
     * @allow (get) - Any authenticated user can check for admin privileges.
     * @deny (get) - An unauthenticated user cannot check for admin privileges.
     * @principle Implements role-based access control using the existence of documents.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if false;
    }
  }
}